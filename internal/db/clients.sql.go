// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, name, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, abn, dir, retainer_amount, retainer_hours, retainer_basis)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18)
RETURNING id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis
`

type CreateClientParams struct {
	ID             string          `db:"id" json:"id"`
	Name           string          `db:"name" json:"name"`
	HourlyRate     sql.NullFloat64 `db:"hourly_rate" json:"hourly_rate"`
	CompanyName    sql.NullString  `db:"company_name" json:"company_name"`
	ContactName    sql.NullString  `db:"contact_name" json:"contact_name"`
	Email          sql.NullString  `db:"email" json:"email"`
	Phone          sql.NullString  `db:"phone" json:"phone"`
	AddressLine1   sql.NullString  `db:"address_line1" json:"address_line1"`
	AddressLine2   sql.NullString  `db:"address_line2" json:"address_line2"`
	City           sql.NullString  `db:"city" json:"city"`
	State          sql.NullString  `db:"state" json:"state"`
	PostalCode     sql.NullString  `db:"postal_code" json:"postal_code"`
	Country        sql.NullString  `db:"country" json:"country"`
	Abn            sql.NullString  `db:"abn" json:"abn"`
	Dir            sql.NullString  `db:"dir" json:"dir"`
	RetainerAmount sql.NullFloat64 `db:"retainer_amount" json:"retainer_amount"`
	RetainerHours  sql.NullFloat64 `db:"retainer_hours" json:"retainer_hours"`
	RetainerBasis  sql.NullString  `db:"retainer_basis" json:"retainer_basis"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.Name,
		arg.HourlyRate,
		arg.CompanyName,
		arg.ContactName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Abn,
		arg.Dir,
		arg.RetainerAmount,
		arg.RetainerHours,
		arg.RetainerBasis,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
		&i.CompanyName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Dir,
		&i.Abn,
		&i.RetainerAmount,
		&i.RetainerHours,
		&i.RetainerBasis,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis FROM clients
WHERE id = ?1
`

func (q *Queries) GetClientByID(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
		&i.CompanyName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Dir,
		&i.Abn,
		&i.RetainerAmount,
		&i.RetainerHours,
		&i.RetainerBasis,
	)
	return i, err
}

const getClientByName = `-- name: GetClientByName :one
SELECT id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis FROM clients
WHERE name = ?1
`

func (q *Queries) GetClientByName(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByName, name)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
		&i.CompanyName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Dir,
		&i.Abn,
		&i.RetainerAmount,
		&i.RetainerHours,
		&i.RetainerBasis,
	)
	return i, err
}

const getClientsWithDirectories = `-- name: GetClientsWithDirectories :many
SELECT id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis FROM clients
WHERE dir IS NOT NULL AND dir != ''
ORDER BY name
`

func (q *Queries) GetClientsWithDirectories(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClientsWithDirectories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HourlyRate,
			&i.CompanyName,
			&i.ContactName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.Dir,
			&i.Abn,
			&i.RetainerAmount,
			&i.RetainerHours,
			&i.RetainerBasis,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClients = `-- name: ListClients :many
SELECT id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis FROM clients
ORDER BY name
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HourlyRate,
			&i.CompanyName,
			&i.ContactName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.Dir,
			&i.Abn,
			&i.RetainerAmount,
			&i.RetainerHours,
			&i.RetainerBasis,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients 
SET 
	hourly_rate = ?1,
    company_name = ?2,
    contact_name = ?3,
    email = ?4,
    phone = ?5,
    address_line1 = ?6,
    address_line2 = ?7,
    city = ?8,
    state = ?9,
    postal_code = ?10,
    country = ?11,
    abn = ?12,
    dir = ?13,
    retainer_amount = ?14,
    retainer_hours = ?15,
    retainer_basis = ?16
WHERE id = ?17
RETURNING id, name, created_at, updated_at, hourly_rate, company_name, contact_name, email, phone, address_line1, address_line2, city, state, postal_code, country, dir, abn, retainer_amount, retainer_hours, retainer_basis
`

type UpdateClientParams struct {
	HourlyRate     sql.NullFloat64 `db:"hourly_rate" json:"hourly_rate"`
	CompanyName    sql.NullString  `db:"company_name" json:"company_name"`
	ContactName    sql.NullString  `db:"contact_name" json:"contact_name"`
	Email          sql.NullString  `db:"email" json:"email"`
	Phone          sql.NullString  `db:"phone" json:"phone"`
	AddressLine1   sql.NullString  `db:"address_line1" json:"address_line1"`
	AddressLine2   sql.NullString  `db:"address_line2" json:"address_line2"`
	City           sql.NullString  `db:"city" json:"city"`
	State          sql.NullString  `db:"state" json:"state"`
	PostalCode     sql.NullString  `db:"postal_code" json:"postal_code"`
	Country        sql.NullString  `db:"country" json:"country"`
	Abn            sql.NullString  `db:"abn" json:"abn"`
	Dir            sql.NullString  `db:"dir" json:"dir"`
	RetainerAmount sql.NullFloat64 `db:"retainer_amount" json:"retainer_amount"`
	RetainerHours  sql.NullFloat64 `db:"retainer_hours" json:"retainer_hours"`
	RetainerBasis  sql.NullString  `db:"retainer_basis" json:"retainer_basis"`
	ID             string          `db:"id" json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.HourlyRate,
		arg.CompanyName,
		arg.ContactName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Abn,
		arg.Dir,
		arg.RetainerAmount,
		arg.RetainerHours,
		arg.RetainerBasis,
		arg.ID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
		&i.CompanyName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Dir,
		&i.Abn,
		&i.RetainerAmount,
		&i.RetainerHours,
		&i.RetainerBasis,
	)
	return i, err
}
