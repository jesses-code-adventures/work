// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, name, hourly_rate)
VALUES (?1, ?2, ?3)
RETURNING id, name, created_at, updated_at, hourly_rate
`

type CreateClientParams struct {
	ID         string          `db:"id" json:"id"`
	Name       string          `db:"name" json:"name"`
	HourlyRate sql.NullFloat64 `db:"hourly_rate" json:"hourly_rate"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.ID, arg.Name, arg.HourlyRate)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
	)
	return i, err
}

const getClientById = `-- name: GetClientById :one
SELECT id, name, created_at, updated_at, hourly_rate FROM clients
WHERE id = ?1
`

func (q *Queries) GetClientById(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientById, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
	)
	return i, err
}

const getClientByName = `-- name: GetClientByName :one
SELECT id, name, created_at, updated_at, hourly_rate FROM clients
WHERE name = ?1
`

func (q *Queries) GetClientByName(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByName, name)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, name, created_at, updated_at, hourly_rate FROM clients
ORDER BY name
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HourlyRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientRate = `-- name: UpdateClientRate :one
UPDATE clients 
SET hourly_rate = ?1
WHERE id = ?2
RETURNING id, name, created_at, updated_at, hourly_rate
`

type UpdateClientRateParams struct {
	HourlyRate sql.NullFloat64 `db:"hourly_rate" json:"hourly_rate"`
	ID         string          `db:"id" json:"id"`
}

func (q *Queries) UpdateClientRate(ctx context.Context, arg UpdateClientRateParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClientRate, arg.HourlyRate, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HourlyRate,
	)
	return i, err
}
